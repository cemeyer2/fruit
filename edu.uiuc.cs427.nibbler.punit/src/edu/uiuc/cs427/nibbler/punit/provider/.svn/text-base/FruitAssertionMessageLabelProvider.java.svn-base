package edu.uiuc.cs427.nibbler.punit.provider;

import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Table;
import org.eclipse.ui.plugin.AbstractUIPlugin;

import edu.uiuc.cs427.nibbler.fruit.core.parser.FruitAssertionMessage;

/**
 * The FruitAssertionMessageLabelProvider class is the Label provider for the
 * the PUnit TableViewer. It extends the standard LabelProvider with support 
 * for creating the columns of the TableViewer
 */

public class FruitAssertionMessageLabelProvider extends LabelProvider implements ITableLabelProvider 
{
	private static final Image CHECKED = AbstractUIPlugin
			.imageDescriptorFromPlugin("edu.uiuc.cs427.nibbler.punit", "icons/checked.gif")
			.createImage();
	private static final Image UNCHECKED = AbstractUIPlugin
			.imageDescriptorFromPlugin("edu.uiuc.cs427.nibbler.punit", "icons/unchecked.gif")
			.createImage();
	/**
	 * Create the columns of the tableViewer with all the attributes
	 * @param viewer the table viewer
	 * @return
	 */
	public void createColumns(TableViewer viewer) 
	{
		Table table = viewer.getTable();
		String[] titles = { "Test Name", "Elapsed Time", "Test Passed?", "Expected Value", "Actual Value" };
		int[] bounds = { 100, 100, 100, 100, 100 };

		for (int i = 0; i < titles.length; i++) 
		{
			TableViewerColumn column = new TableViewerColumn(viewer, SWT.NONE);
			column.getColumn().setText(titles[i]);
			column.getColumn().setWidth(bounds[i]);
			column.getColumn().setResizable(true);
		}
		table.setHeaderVisible(true);
		table.setLinesVisible(true);
	}

	@Override
	public Image getColumnImage(Object element, int columnIndex) 
	{
		/*if (columnIndex == 2) 
		{
			if (((FruitAssertionMessage) element).isFailure()) 
			{
				return UNCHECKED;
			} 
			else 
			{
				return CHECKED;
			}
		}*/
		return null;
	}

	@Override
	public String getColumnText(Object element, int columnIndex) 
	{
		FruitAssertionMessage message = (FruitAssertionMessage) element;
		switch (columnIndex) 
		{
			case 0:
				return message.getTestName();
			case 1:
				return message.getElapsedTimeInSeconds()+"";
			case 2:
				return String.valueOf(!message.isFailure());
			case 3:
				return message.getExpectedValue();
			case 4:
				return message.getActualValue();
			default:
				throw new RuntimeException("Invalid Column");
		}
	}

}

