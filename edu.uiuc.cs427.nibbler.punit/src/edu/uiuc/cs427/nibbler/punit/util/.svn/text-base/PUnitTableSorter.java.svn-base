package edu.uiuc.cs427.nibbler.punit.util;

import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.ViewerSorter;

import edu.uiuc.cs427.nibbler.fruit.core.parser.FruitAssertionMessage;


public class PUnitTableSorter extends ViewerSorter 
{
	private int propertyIndex;
	private static final int ASCENDING = 0;

	private static final int DESCENDING = 1;

	private int direction;

	public PUnitTableSorter() 
	{
		this.propertyIndex = 0;
		direction = DESCENDING;
	}

	public void setColumn(int column) 
	{
		if (column == this.propertyIndex) 
		{
			// Same column as last sort; toggle the direction
			direction = 1 - direction;
		} 
		else 
		{
			// New column; do an ascending sort
			this.propertyIndex = column;
			direction = DESCENDING;
		}
	}

	
	public int compare(Viewer viewer, FruitAssertionMessage m1, FruitAssertionMessage m2) 
	{
		int rc = 0;
		switch (propertyIndex) 
		{
			case 0:
				rc = m1.getTestName().compareTo(m2.getTestName());
				break;
			case 1:
				rc = (new Float(m1.getElapsedTimeInSeconds())).compareTo(new Float(m2.getElapsedTimeInSeconds()));
				break;
			case 2:
				rc = (new Boolean(!m1.isFailure())).compareTo(new Boolean(!m2.isFailure()));
				break;
			case 3:
				rc = m1.getExpectedValue().compareTo(m2.getExpectedValue());
				break;
			case 4:
				rc = m1.getActualValue().compareTo(m2.getActualValue());
				break;
			default:
				rc = 0;
		}
		// If descending order, flip the direction
		if (direction == DESCENDING) 
		{
			rc = -rc;
		}
		return rc;
	}
}

